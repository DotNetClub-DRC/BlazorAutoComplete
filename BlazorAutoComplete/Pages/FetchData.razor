@page "/fetchdata"

@using BlazorAutoComplete.Data
@inject WeatherForecastService ForecastService

<style>
    div.autoComplete {
        width: 200px;
    }

    div section {
        height: 25px;
        width: 100%;
    }

        div section:hover {
            background-color: lightseagreen;
        }
</style>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>
<input @bind="SearchWord" @bind:event="oninput" />
<br />

<div class="autoComplete">
    @foreach (var item in options)
    {
        if (item.ToUpper().Contains(SearchWord.ToUpper()) && SearchWord.Length > 2)
        {
            <section @onclick="() => SearchWord = item">@item</section>
        }
    }
</div>

<div style="height: 50vh; overflow-y: scroll;">
    @if (forecasts == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in forecasts.Where(s => s.Summary.ToUpper().Contains(SearchWord.ToUpper())))
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    public string SearchWord { get; set; } = string.Empty;
    List<string> options;
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        options = forecasts.Select(f => f.Summary).Distinct().ToList();
    }
}